== Chapter 15 스트림 처리와 점진적 입출력

함수형 프로그래밍 == 완비된 패러다임. 외부 세계와 상호작용하는 프로그램을 포함해서, 상상할 수 있는 그 어떤 프로그램도 함수적으로 표현 가능

=== 15.1 명령식 입출력의 문제점을 보여주는 에제 하나

파일의 행(line) 수가 40,000 을 넘는지 점검하는 간단한 프로그램을 작성하는 것

[source,scala]
----
def linesGt40k(filename: String): IO[Boolean] = IO {
  val src = io.Source.fromFile(filename)
  try {
    var count = 0
    val lines: Iterator[String] = src.getLines
    while ( count <= 40000 & lines.hasNext) {
      lines.next
      count += 1
    }
    count > 40000
  }
  finally src.close
}

// execution
unsafePerformIO(linesGt40k("lines.txt"))
----

이 프로그램이 바람직한 측면

* 점진적이다 : 파일 전체를 한꺼번에 메모리에 적재 하지 않음
* 답이 나오는 즉시 종료 됨

나쁜 측면

* resource leak : 작업을 마친 후 파일을 반드시 닫아 주는 것이 당연하지만 종종 프로그래머가 까먹기도 함. 더 흔한 일은 파일을 닫는 코드가 finally 블록 밖에 있는 상황에서 오류가 발생
* 고수준 알고리즘과 저수준 관심사(반복과 파일 접근)이 섞여 있음 : 요소 가져옴, 오류 처리, 자원 닫기 등

우리가 작성해야 할 것

* 자원에 안전한 프로그램(resource-safe) : 파일을 잘 닫음, 닫힌 파일을 읽으려 하지 않음 등
* 알고리즘과 IO관심사가 뒤섞이는 추잡한일 회피

원래의 시나리오 재구성

* 파일이 비지 않은 행이 40,000개를 넘는지 점검
* 40,000번째 행 이전에 마법의 주문 "abracadabra"로 시작하는 행 찾기

해결 방법

* 첫 경우 : String => Boolean 함수 전달
* 둘 째는 ?
  * 상태를 유지하도록 루프를 수정해야 함
  * IO 모나드 안에서 효율적인 코드를 작성한다는 것은 전일적인 루프를 작성한다는 것이고, 루프는 합성이 안됨

Stream[String]으로 생각해보자

[source,scala]
----
lines.zipWithIndex.exists(_._2 + 1 >= 40000)


// 비어 있지 않은 행 count
lines.filter(!_.trim.isEmpty).zipWithIndex.exists(_._2 + 1 >= 40000)

lines.filter(!_.trim.isEmpty)
     .take(40000)
     .map(_.head)
     .indexOfSlice("abracadabra".toList)
----

이는 소위 게으른 입출력(lazy I/O)에 해당 함. => IO모나드 안의 Stream[String]이 실제로는 순수한 값이 아니기 때문에 문제 +
게으른 입출력이 매력적이긴 하지만 아래와 같은 문제가 있다.

* 자원에 안전하지 않다.
* 파일이 닫히 후에 같은 Stream을 다시 훑는 시도를 방지해 주지 않는다.
* 스트림 요소를 강제하면 입출력 부수 효과가 발생한다. (;thread-safe 하지 않음)
* 좀 더 현실적인 시나리오에서는 Stream[String]에 어떤 일이 일어날지를 완전하게 알 수 없을 가능성이 크다.

=== 15.2 간단한 스트림 변환기

* Stream processor or Stream transducer 개념 도입
  * 스트림 변환기는 한 스트림을 다른 스트림으로 변환하는 작업을 서술한다.
  * 여기서 스트림은 상당히 느슨한 용어로, 게으르게 생성되거나 외부 공급원에서 자료를 공급받는 순차열 전반을 지칭한다.

[source,scala]
----
sealed trait Process[I,O]

case  class Emit[I,O](
  head: 0,
  tail: Process[I,O] = Halt[I,O]()))
  extends Process[I,O]

case class Await[I,O](
  recv: Option[I] => Process[I,O])
  extends Process[I,O]

case class Halt[I,O]() extends Process[I,O]
----

* Process[I,O]를 이용하면 I 형식의 값들을 담은 스트림을 O 형식의 값들을 담은 스트림으로 변환할 수 있다.
* Process[I,O]는 Stream[I] => Stream[O]가 아니다
  * 반드시 구동기(driver)로 구동해야 하는 상태 기계

주어진 시점에서 Process의 상태는 3중 1

* Emit(head, tail) : head를 출력 스트림에 방출해야 하는 상태기계가 tail 상태로 전이해야 함을 구동기에 요청
* Await(recv) : 입력 스트림에서 값 하나를 요청
* Halt : 더 이상 입력에서 요소를 읽거나 출력으로 요소를 방출하지 말라고 구동기에 요청

[source,scala]
----
def apply(s: Stream[I]): Stream[O] = this match {
  case Halt() => Stream()
  case Await(recv) => s match {
    case h #:: t => recv(Some(h))(t)
    case xs => recv(None)(xs)
  }
  case Emit(h,t) => h #:: t(s)
}
----

==== 15.2.1 처리 공정의 생성

임의의 함수 f: I => O 를 Process[I,O]로 변환할 수 있다. Await로 값을 기다리다가 값이 오면 f로 변환해서 Emit을 방출하면 된다.

[source,scala]
----
def lifeOne[I,O](f: I => O): Process[I, O] =
  Await {
    case Some(i) => Emit(f(i))
    case None => Halt()
  }
----

실행해보자!

[source,scala]
----
scala> val p = liftOne((x: Int) => x * 2)
p: Process[Int, Int] = Await(<function1>)

scala> val xs = p(Stream(1,2,3)).toList
xs: List[Int] = List(2)
----

===== 조합기 예제

[source,scala]
----
def repeat: Process[I,O] = {
  def go(p: Process[I,O]): Process[I,O] = p match {
    case Halt() => go(this)
    case Await(recv) => Await {
      case None => recv(None)
      case i => go(recv(i))
    }
    case Emit(h,t) => Emit(h, go(t))
  }
  go(this)
}
----

이제 임의의 함수를 Stream에 대해 사상되는 Process로 승급시킬 수 있다.

[source,scala]
----
def list[I,O](f: I => O): Process[I,O] = listOne(f).repeat
----

무한히 1을 방출하는 스트림을 얻으려면?

[source,scala]
----
// 재앙
Emit(1).repeat

scala> val units = Stream.continually(())
units: scala.collection.immutable.Stream[Unit] = Stream((), ?)

scala>val ones = list((_:Unit) => 1)(units)
ones: Stream[Int] = Stream(1, ?)
----

p를 만족하지 않는 요소를 걸러내는 Process

[source,scala]
----
def filter[I](p: I => Boolean): Process[I,I] =
  Await[I,I] {
    case Some(i) if p(i) => emit(i)
    case _ => Halt()
  }.repeat


scala> val even = filter((x: Int) => x % 2 == 0)
even: Process[Int, Int] = Await(<function1>)

scala> val evens = even(Stream(1,2,3,4)).toList
evens: List[Int] = List(2, 4)
----

예제 : sum

[source,scala]
----
def sum: Process[Double, Double] = {
  def go(acc: Double): Process[Double, Double] =
    Await {
      case Some(d) => Emit(d+acc, go(d+acc))
      case None => Halt()
    }
  go(0.0)
}

scala> val s = sum(Stream(1.0, 2.0, 3.0, 4.0,)).toList
s: List[Double] = List(1.0, 3.0, 6.0, 10.0)
----

===== 15.2.2 처리 공정의 합성과 추가

이제 Process 값들을 합성해서 좀 더 복잡한 스트림 변환을 구축 할 수 있다.

[source,scala]
----
f |> g
----

f |> g가 f와 g가 수행하는 변환들을 융합 한다는 바람직한 속성이 있다. 이제 아래와 같은 표현식을 작성할 수 있다. 또한 +
이를 이용해서 한 Process의 출력을 임의의 함수를 이용해서 변환하는 map도 손쉽게 구현할 수 있다.

[source,scala]
----
filter(_ % 2 == 0) |> list(_ + 1)

def map[O2](f: O => O2): Process[I,O2] = this |> list(f)
----

이는 형식 생성자 Process[I,_]가 하나의 함수자임을 뜻한다.

이와 유사한 방식으로 ++ 메서드 또한 구현 가능하고, 이를 Process의 메서드로 두었다고 할 때, flatMap을 구현할 수 있다.

[source,scala]
----
def ++(p: => Process[I,O]): Process[I,O] = this match {
  case Halt() => p
  case Emit(h,t) => Emit(h, t++ p)
  case Await(recv) => Await(recv andThen (_ ++ p))
}

def flatMap[O2](f: O => Process[I,O2]): Process[I,O2] = this match {
  case Halt() => Halt()
  case Emit(h, t) => f(h) ++ t.flatMap(f)
  case Await(recv) => Await(recv andThen (_ flatMap f))
}
----

===== Process[I,_]가 하나의 모나드를 형성하는가?" => 당연히....


[source,scala]
----
def monad[I]: Monad[({type f[x] = Process[I,x]})#f] =
  new Monad[({type f[x] = Process[I,x]})#f] {
    def unit[O](o: => O): Process[I,O] = Emit(o)
    def flatMap[O,O2](p: Process[I,O])(
                      f: O => Process[I,O2]): Process[I,O2] =
        p flatMap f
  }
----

=== 15.2.3 파일처리

[source,scala]
----
def processFile[A, B](f: java.io.File,
                      p: Process[String, A],
                      z: B)(g: (B, A) => B): IO[B] = IO {

    @annotation.tailrec
    def go(ss: Iterator[String], cur: Process[String, A], acc: B): B =
      cur match {
        case Halt() => acc
        case Await(recv) ->
          val next = if (ss.hasNext) recv(Some(ss.next))
                     else recv(None)
             go(ss, next,acc)
          case Emit(h, t) => go(ss, t, g(acc, h))
      }
    val s = io.Source.fromFile(f)
    try go(s.getLines, p, z)
    finally s.close
}
----
