== Chapter.12 적용성 함수자와 순회 가능 함수자

적용성 함수자(applicative functor)
순회 가능 함수자(traversable functor)

=== 12.1 모나드의 일반화

[source,scala]
----
def sequence[A](lfa: List[F[A]]): F[List[A]]
  traverse(lfa)(fa => fa)

def traverse[A,B](as: List[A])(f: A => F[B]): F[List[B]]
  as.foldRight(unit(List[B]()))((a, mbs) => map2(f(a), mbs)(_ :: _))

def map2[A,B,C](ma: F[A], mb: F[B])(f: (A,B) => C): F[C] =
  flatMap(ma)(a => map(mb)(b => f(a,b)))
----

Monad에 대한 수많은 유용한 조합기들을 unit과 map2로 정의할 수 있다.
traverse 조합기가 그러한 조합기의 예.

Monad에 대한 하나의 변종으로써, unit과 map2를 기본수단으로 두는 새로운 추상을 **적용성 함수자**라고 부름.

===12.2 Applicative 특질

적용성 함수자라는 개념을, map2와 unit을 기본수단으로 하는 Applicative라는 새 인터페이스로 구체화해 보자.

목록12.1 Applicative 인터페이스의 정의

[source,scala]
----
trait Applicative[F[_]] extends Functor[F] {
    // 기본수단 조합기들
    def map2[A,B,C](fa: F[A], fb: F[B])(f: (A, B) => C): F[C]
    def unit[A](a: => A): F[A]

    // 파생된 조합기들
    // map을 unit과 map2를 이용해서 구현할 수 있다.
    def map[B](fa: F[A])(f: A => B): F[B] =
    	// ()는 Unit 형식의 유일하 값임을 기억하기 바란다.
    	// 따라서 unit(())는 그러한 가짜 값 ()로 unit을 호출하는 것에 해당한다.
        map2(fa, unit(()))((a, _) => f(a))

     // traverse의 정의는 이전과 동일하다.
￼￼￼     def traverse[A,B](as: List[A])(f: A => F[B]): F[List[B]]
        as.foldRight(unit(List[B]()))((a, fbs) => map2(f(a), fbs)(_ :: _))
}
----

- 이 특질은 "**모든 적용성 함수자는 함수자이다**"라는 명제를 확립한다.
- 이 특질에서 map은 map2와 unit으로 구현된다.
- traverse의 구현은 이전과 바뀐 점이 없다.
- flatMap이나 join에 직접 의존하지 않는 다른 조합기들도 이와 비슷하게 Applicative에 직접 옮겨놓을 수 있다.

목록 12.2 Monad를 Applicative의 하위 형식으로 정의

[source,scala]
----
trait Monad[F[_]] extends Applicative[F] {
    //Monad의 최소한의 구현은 반드시 unit을 구현해야 하며, flatMap 또는 join과 map을 재정의해야 한다.
    def flatMap[A,B](fa: F[A])(f: A => F[B]): F[B] = join(map(fa)(f))

    def join[A](ffa: F[F[A]]): F[A] = flatMap(ffa)(fa => fa)

    def compose[A,B,C](f: A => F[B], g: B => F[C]): A => F[C] =
        a => flatMap(f(a))(g)

    def map[B](fa: F[A])(f: A => B): F[B] =
        flatMap(fa)((a: A) => unit(f(a)))

    def map2[A,B,C](fa: F[A], fb: F[B])(f: (A, B) => C): F[C] =
        flatMap(fa)(a => map(fb)(b => f(a,b)))
}
----

- flatMap을 이용한 map2의 기본 구현을 제공함으로써, Monad[F]를 Applicative[F]의 하위 형식으로 만들 수 있다.
- 이는 **모든 모나드는 적용 함수자**임을 뜻한다.
- 즉, 이미 모나드인 자료 형식이라면 그 어떤 것이든 따로 Applicative 인스턴스를 제공할 필요가 없다.

=== 12.4 적용성 함수의 장점

Applicative 인터페이스가 중요한 이유

* 최소한의 가정만으로 traverse 같은 조합기를 구현하는 것이 바람직하다. 자료 형식이 flatMap보다는 map2를 구현할 수 있다고 가정하는 것이 낫다.
* Applicative는 Monad보다 "약하기" 때문에, 적용성 효과의 해석기가 더 유연해진다. 한 예로 파싱을 생각해보자. 만일 flatMap을 사용하지 않고 파서를 정의할 수 있다면, 이는 파싱하고자 하는 문법의 구조가 파싱을 시작하기 전에 이미 결정되어 있음을 뜻한다.
* 적용성 함수자들은 합성되지만 모나드는(일반적으로) 그렇지 않다.

=== 12.4.1 모든 적용성 함수자가 모나드는 아니다

==== 적용성 스트림

스트림은 map2와 unit은 정의할 수 있지만 flatMap은 정의할 수 없다.

==== 유효성 점검: 오류를 누적하는 Either 변종

웹 페이지를 통해 양식의 유효성을 점검하는 문제를 생각해보자. 첫 오류만 보고한다면 사용자는 양식의 오류를 한번에 하나씩 고치는 과정을 되풀이해야 한다. Either를 모나드적으로 사용한다면 이런 상황이 발생한다.

[source,scala]
----
validName(field1) flatMap (f1 =>
validBirthdate(field2) flatMap( f2 =>
validPhone(field3) map( f3 => WebForm(f1, f2, f3))
----

validName이 실패해서 오류를 반환하면 validBirthdate와 validPhone은 실행되지 않음

map3을 이용하면

[source,scala]
----
map3(
	validName(field1),
	validBirthdate(field2),
	validPhone(field3))(
		WebForm(_,_,_))
----

=== 12.5 적용성 함수자 법칙

==== 12.5.1 왼쪽, 오른쪽 항등법칙

===== 함수자 법칙

[source,scala]
----
map(v)(id) == v
map(map(v)(g))(f) == map(x)(f compose g)
----

===== 항등법칙

[source,scala]
----
// map의 정의
def map[A, B](fa: F[A])(f: A => B): F[B] =
  map2(fa, unit(()))((a, _) => f(a))

// unit()이 좌변에 놓여도 동일
def map[A, B](fa: F[A])(f: A => B): F[B] =
  map2(unit(()), fa)((_, a) => f(a))
----

`map`의 두 구현은 **모두** 함수자 법칙들을 지킨다고 말할 수 있으며, 어떤 `fa: F[A]`에 대해 `map2`는 `unit`과 함께 `fa`의 구조를 보존한다.

[source,scala]
----
map2(unit(()), fa)((_, a) => a) == fa // 왼쪽 항등법칙
map2(fa, unit(()))((a, _) => a) == fa // 오른쪽 항등법칙
----

=== 12.5.2 결합법칙

[source,scala]
----

def map3[A, B, C, D](fa: F[A],
                     fb: F[B],
                     fc: F[C])(f: (A, B, C) => D): F[D]
----

`map3`를 `map2`로 구현한다면,

- `fa`와 `fb`를 결합한 후 그 결과를 `fc`와 결합
- `fb`와 `fc`를 결합한 후 그 결과를 `fa`와 결합

적용성 함수자에 대한 결합법칙에 따르면 어떤 방식을 따르든 같은 결과가 나와야 한다.

===== 모노이드, 모나드의 결합법칙

[source,scala]
----
op(a, op(b, c)) == op(op(a, b), c)
compose(f, op(g, h)) == compose(compose(f, g), h)
----

===== 적용성 함수자에 대한 결합법칙

[source,scala]
----
def product[A, B](fa: F[A], fb: f[B]): F[(A, B)] =
  map2(fa, fb)((_, _))

def assoc[A, B, C](p: (A, (B, C))): ((A, B), C) =
  p match { case (a, (b, c)) => ((a, b), c) }

// product, assoc를 이용한 적용성 함수자의 결합법칙 표현
product(product(fa, fb), fc) == map(product(fa, product(fb, fc)))(assoc)
----

==== 12.5.3 곱의 자연성 법칙

[source,scala]
----
val F: Applicative[Option] = ...

case class Employee(name: String, id: Int)
case class Pay(rate: Double, hoursPerYear: Double)

def format(e: Option[Employee], pay: Option[Pay]): Option[String] =
  F.map2(e, pay) { (e, pay) =>
    s"${e.name} makes ${pay.rate * pay.hoursPerYear}"
  }

val e: Option[Employee] = ...
val pay: Option[Pay] = ...
format(e, pay)
----

`format`이 `Option[Employee]`와 `Option[Pay]` 대신 `Option[String]`과 `Option[Double]`을 받도록 구현하면 `Employee`, `Pay` 자료 형식을 직접적으로 알 필요가 없어진다.

[source,scala]
----
val F: Applicative[Option] = ...

def format(name: Option[String], pay: Option[Double]): Option[String] =
  F.map2(name, pay) { (name, pay) => s"$name makes $pay" }

val e: Option[Employee] = ...
val pay: Option[Pay] = ...

format(
  F.map(e)(_.name),
  F.map(pay)(pay => pay.rate * pay.hoursPerYear))
----

Applicative 효과들을 다룰 때에는 `map2`로 값들을 **결합하기 전에** 변환을 적용할 수도 있고 **결합한 후에** 적용할 수도 있는 경우가 많으며, 자연성 법칙은 **어떤 쪽을 선택하든 결과가 같음**을 말해준다.

[source,scala]
----
def productF[I1, O1, I2, O2](f: I1 => O1, g: I2 => O2): (I1, I2) => (O1, O2) =
  (i1, i2) => (f(i1), g(i2))

map2(a, b)(productF(f, g)) == product(map(a)(f), map(b)(g))

적용성 함수자에 대한 법칙들은 `unit`, `map`, `map2`가 일관되고 합리적인 방식으로 작동함을 보장한다.
----


=== 12.6 순회 가능 함수자

* traverse 함수와 sequence 함수가 flatMap에 직접 의존하지 않는다.
* 적용자 함수를 이용해 traverse, sequence를 다시 한번 일반화 해서 또 다른 추상을 찾아보자.

[source,scala]
----
def traverse[F[_], A, B](as: List[A])(f: A => F[B]): F[List[B]]
def sequence[F[_], A](fas: List[F[A]]): F[List[A]]
----

* 항상 List에 한정적으로만 사용해야 되는가?

* 순회 가능한 자료형식들 모두 사용 가능하도록 추상화를 하자.

[source,scala]
----
trait Traverse[F[_]] {
  def traverse[G[_]:Applicative, A, B](fa: F[A])(f: A => G[B]): G[F[B]] =
    sequence(map(fa)(f))
  def sequence[G[_]:Applicative, A](fga: F[G[A]]): G[F[A]] =
    traverse(fga)(ga => ga)
----

> sequence 서명에서 G가 적용자 함수이면, F[G[A]] => G[F[A]] 이다.
**이것이 뜻하는 바는 잠시 후에 논의**

* Applicative인 Option, Par와 Traverse인 List, Tree, Map의 sequence 동작
  * `List[Option[A]] => Option[List[A]]`
    -> 좌측의 List의 요소 중 하나라도 None이면 None, 그렇지 않으면 List를 Some로 감싼 결과를 리턴.

  * `Tree[Option[A]] => Option[Tree[A]]`
    -> 좌측의 Tree의 노드 중 하나라도 None이면 None, 그렇지 않으면 List를 Some로 감싼 결과를 리턴.

  * `Map[K, Par[A]] => Par[Map[K, A]]`
    -> Map에 있는 모든 값을 병렬로 평가하는 병렬 계산을 산출한다.

* sequence와 traverse를 이용해 가장 일반적인 방식으로 정의할 수 있는 연산들이 놀랄 만큼 많다.
  **(다음 절에서 살펴볼 것이다.)**
* 순회 가능 함수자는 자료구조와 함수를 받고 자료구조를 받고, 자료구조에 담긴 자료에 함수를 적용해서 결과를 산출하는 접기(fold) 연산과 비슷하다. 그러나 traverse는 **원래의 구조를 보존**하지만, foldMap은 구조를 폐기하고 그 자리를 모노이드에 대한 연산들로 대신한다.

[source,scala]
----
def traverse[F[_], A, B](as: List[A])(f: A => F[B]): F[List[B]]
def foldMap[A, B](as: List[A], m: Monoid[B])(f: A => B): B
----


=== 12.7 Traverse의 용도

==== 12.7.1 모노이드에서 적용성 함수자로

traverse가 map보다 더 일반적이라는 사실을 배웠다. 이번 절에서는 traverse로 foldMap을 표현할 수 있으며, 그럼으로써 foldLeft와 foldRight도 표현할 수 있음을 배울 것이다.
traverse의 서명을 다시 살펴보자.

`def traverse[G[_]]: Applicative, A ,B](fa: F[A])(F: A=> G[B]): G[F[B]]`

G가 임의의 형식을 Int로 사상하는 형식 생성자 ConstInt라고 하자.
즉, ConstInt[A]는 자신의 형식 인수 A를 버리고 그냥 Int만 돌려준다.

`type ConstInt[A] = Int`

traverse의 형식 서명에서 G를 ConstInt로 인스턴스화하면 다음과 같은 형식 서명이 나온다.

`def traverse[A,B](fa: F[A])(f: A => Int): Int`

이는 Foldable의 foldMap과 아주 비슷한 모습이다. 만일 F가 List같은 것이라면, 이 서명을 구현하는 데 필요한 것은 f가 돌려준 Int값들을 목록의 각 요소와 결합하는 수단과 빈 목록을 처리하기 위한 '시작' 값 뿐이다.
다른 말로 하면 Monoid[Int]만 있으면 된다. 그리고 그런 Monoid[Int]를 마련하는 것은 쉬운 일이다.
 사실, 앞에서 언급한 상수 함수자가 주어진다면, 임의의 Monoid를 Applicative로 변환할 수 있다.


[source,scala]
----
type Const[M, B] = M  // 임의의 M에 대해 일반화된 ConstInt이다.

implicit def monoidApplicative[M](M: Monoid[M]) =
	new Applicative[({ type f[x] = Const[M, x] })#f] {
		def unit[A](a: => A): M = M.zero
		def map2[A,B,C](m1: M, m2: M)(f: (A, B) => C): M = M.op(m1, m2)
    }
----

이는 Traverse가 Foldable을 확장할 수 있으며 foldMap의 기본 구현을 traverse를 이용해서 제공할 수 있음을 제공한다.


[source,scala]
----
trait Traverse[F[_]] extends Functor[F] with Foldable[F] {
  ...
  def foldMap[A,M](as: F[A])(f: A => M)(mb: Monoid[M]): M =
    traverse[({type f[x] = Const[M, x]})#f, A, Nothing](as)(f)(monoidApplictive(mb))
}
----

Traverse는 이제 Foldable 뿐만 아니라 Functor도 확장함을 주목하기 바란다. 여기서 중요한 점은, Foldable 자체는 Funcotr를 확장하지 못한다는 것이다. List같은 가장 구체적인 Foldable 자료구조에 대한 접기 연산으로 map을 작성하는 것은 가능하다 해도, 일반적으로는 불가능하다.


==== 12.7.2 상태있는 순회
State 동작과 traverse를 이용하면, 순회과정에서 일종의 내부 상태를 유지하면서 콜렉션을 훑는 코드를 작성 할 수 있다. 그런데 안타깝게도 State를 적절하게 부분 적용하려면 상당히 많은 형식 주해가 필요하다.
그래서 이를 위한 특별한 메서드를 만드는 것이 좋다.

[source,scala]
----
def traverseS[S,A,B](fa: F[A])(f: A => State[S,B]): State[S, F[B]] =
    traverse[({type f[x] = State[S,x]})#f, A, B](fa)(f)(Monad.stateMonad)
----
모든 요소에 그 요소의 위치를 설정하는 state 순회 함수를 살펴보자. 이 함수는 내부적으로 정수 상태 하나를 유지한다. (그 상태는 0에서 시작하여 단계마다 1씩 증가한다.)

[source,scala]
----
// 순회 가능한 자료구조 안의 요소들에 번호 매기기기
def zipWithIndex_[A](ta: F[A]): F[(A,Int)] =
	traverseS(ta)((a: A) => (for {
		i <- get[Int]
		_ <- set(i + 1)
	} yield (a, i))).run(0)._1

이 정의는 List와 Tree를 비롯한 임의의 순회 가능 형식에 유효하다.
순회 도중 List[A] 형식의 상태를 유지하면서,
임의의 순회 가능 함수자를 하나의 List로 바꾸는 것도 가능하다.
----



[source,scala]
----
// 순회 가능 함수자를 목록으로 변환
def toList_[A](fa: F[A]): List[A] =
	traverseS(fa)((a: A) => (for {
		as <- get[List[A]]	//현재 상태를 얻는다.
		_  <- set(a :: as) // 현재 요소를 추가하고, 새 목록을 새 상태로서 설정한다.
	} yield ())).run(Nil)._2.reverse
----

초기 상태에는 Nil로 시작하여 순회 도중 만나는 요소마다 그 요소를 누적 목록의 앞에 추가한다.
그러면 목록이 순회 순서의 역순으로 구축되므로, 상태 동작이 완료되어서 목록이 완성되면 그것을 뒤집는다.
yield() 호출은 이 인스턴스가 상태 이외에는 어떤 값도 돌려주지 않도록 하기 위한 것이다.

zipwithIndex와 toList의 코드가 거의 비슷하다. 그리고 State를 이용한 순회들은 대부분 이와 동일한 패턴, 즉 현재 상태를 얻고, 다음 상태를 계산하고, 그것을 현재 상태로 설정하고, 어떤 값을 산출(yield)하는 패턴을 따른다. 따라서 이 패턴을 하나의 함수로 갈무리해야 마땅하다.

[source,scala]
----
// 공통의 패턴을 추출해서 만든 mapAccum 함수

def mapAccum[S,A,B](fa: F[A], s: S)(f: (A, S) => (B, S)): (F[B], S) =
	traverseS(fa)((a: A) => (for {
		s1 <- get[S]
		(b, s2) = f(a, s1)
		_  <- set(s2)
	} yield b)).run(s)

override def toList[A](fa: F[A]): List[A] =
	mapAccum(fa, List[A]())((a, s) => ((), a :: s))._2.reverse

def zipWithIndex[A](fa: F[A]): F[(A, Int)] =
	mapAccum(fa, 0)((a, s) => ((a, s), s + 1))._1
----

==== 12.7.3 순회 가능 구조의 조합
순회 가능 함수자는 반드시 인수의 형태를 유지해야 한다는 성질을 가지고 있다.
이는 순회 가능 함수자의 강점이자 약점이다.
Traverse[F]가 주어졌을 때, 어떤 형식 F[A]의 값을 어떤 형식 F[B]의 값과 조합해서 F[C]를 얻을 수 있을까? mapAccum을 이용해서 zip의 일반적 버전을 작성해 보자.

[source,scala]
----
// 서로 다른 두 구조 형식의 조합
def zip[A,B](fa: F[A], fb: F[B]): F[(A, B)] =
	(mapAccum(fa, toList(fb)) {
	case (a, Nil) => sys.error("zip: Incompatible shapes.")
	case (a, b :: bs) => ((a, b), bs)
})._1
----

이 버전의 zip이 '형태'가 다른 인수들은 처리하지 못함을 주목하기 바란다.
예를들어 F가 List일 때 이 버전은 길이가 다른 목록들은 재대로 처리하지 못한다.
이 구현에서 목록 fb는 반드시 fa와 길이가 같거나 더 길어야한다.
F가 Tree이면 모든 수준에서 fb의 가지 개수가 fa의 가지 개수와 같거나 더 많아야 한다.

일반적 zip을 조금 변경해서 왼쪽 인수를 중심으로 한 버전과
오른쪽 인수를 중심으로 한 버전을 따로 만들면 이 문제를 해결 할 수 있다.


[source,scala]
----
// zip의 좀 더 유연한 구현
def zipL[A,B](fa: F[A], fb: F[B]): F[(A, Option[B])] =
	(mapAccum(fa, toList(fb)) {
	case (a, Nil) => ((a, None), Nil)
	case (a, b :: bs) => ((a, Some(b)), bs)
})._1

def zipR[A,B](fa: F[A], fb: F[B]): F[(Option[A], B)] =
	(mapAccum(fb, toList(fa)) {
	case (b, Nil) => ((None, b), Nil)
	case (b, a :: as) => ((Some(a), b), as)
})._1
----

이 구현들은 List나 기타 순차열 형식에 잘 작동한다. 예를들어 List의 경우 zipR의 결과는 fb의 형태를 따른다.
만일 fb가 fa보다 길면 여분의 공간이 None들로 채워진다.
Tree같이 좀 더 흥미로운 형식에는 이 구현들이 그리 합당하지 않을 수 있다.
zipL은 오른쪽 인수를 그냥 List[B]로 평탄화(flattening)하기 때문에 원래의 구조가 사라진다.
Tree의 경우에는 각 노드의 이름표를 전위 순서(preorder)로 순회하는 것에 해당한다.
트리의 경우 zipL과 zipR은 두 트리가 같은 형태를 공유함을 알고 있을 떄 가장 유용하다.

==== 12.7.4 순회의 융합

5장에서는 한 자료구조를 여러번 훑는 연산을 한 번의 순회로 융합하는 방법을 논의했다.
10장에서는 모노이드 곱을 이용해서 접기 가능 구조에 대한 여러 번의 계산을 한번의 패스로 수행하는 방법을 살펴보았다. 마찬가지로, 적용성 함수자 곱을 이용하면 순회 가능 구조에 대한 다수의 순회를 융합할 수 있다.


==== 12.7.5 중첩된 순회
적용성 함수자 합성을 이용해서 순회들을 융합하는 것은 물론, 순회 가능 함수자들 자체를 합성할 수도 있다.
Map[K, Option[List[V]]] 같은 중첩된(내포된) 구조가 있을 때, Map, Option, List를 동시에 순회해서 그 안에 들어 있는 V값을 얻는 것은 쉽다. 이는 Map과 Option, List가 모두 순회 가능 구조라서 가능한 일이다.

==== 12.7.6 모나드 합성
Applicative 인스턴스들은 항상 합성되지만 Monad 인스턴스들은 그렇지 않다. 이전에 일반적 모나드 합성을 구현하려 시도한 적이 있었지만, 중첩된 모나드 F와 G를 위한 join을 구현하려면 F[G[F[G[A]]]] => F[G[A]] 같은 형식을 작성해야 한다.
그런데 이는 일반적으로는 얻을 수 없는 형식이다. 그러나  G에 대한 Traverse 인스턴스가 존재한다면, sequence를 이용해서 G[F[ _ ]]를 F[G[ _ ]로 바꿀 수 있다. 그러면 F[F[G[G[A]]]]가 나오므로, 인접한 F계층들과 인접한 G계층들을 각각의 Monad 인스턴스를 이용해서 결합하면 된다.

> 자료구조가 표현력이 좋고 강력한 대신 합성 능력과 모듈성은 떨어지는 경우가 있다.
모나드 합성의 문제점을, 모나드마다 합성을 위해 특별하게 작성된 버전을 이용해서 해결하기도 하는데, 그런 것들을 모나드 변환기(monad transformer)라고 부른다.

[source,scala]
----
case class optionT[M[_],A](vale: M[Option[A]])(implicit M: Moand[M]) {
	def flatMap[B](f: A => OptionT[M, B]): OptionT[M, B] =
		OptionT(value flatMap {
        case Some(a) => M.unit(None)
        case Some(a) => f(a).vlaue
      }
  }
----

이 구현은 주어진 함수를 M과 Option 모두에 사상하고, M[Option[M[Option[A]]]] 같은 구조를 그냥 M[Option[A]]로 평평하게 만든다. 그런데 이 구현은 Option에 특화된 것이다.
그리고 Traverse의 장점을 취하는 일반적 전략은 순회 가능 함수자에 적용된다.
예를들어 State(순회 가능이 아닌)와의 합성을 위해서는 특화된 StateT모나드 변환기를 작성해야 한다.
따라서 모든 모나드에 유효한 일반적 합성 전략은 없다.
