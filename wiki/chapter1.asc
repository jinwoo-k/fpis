= 1장 . 함수형 프로그래밍이란 무엇인가?

함수형 프로그래밍은 지대한 영향을 가져올 아주 간단한 전제로 부터 시작한다.  오직 pure functions을 사용해서 프로그램을 만드는 것이다. 다른 말로는 사이드 이펙트가 없다. 그럼 사이드 이펙트는 무엇일까?

사이드 이펙트는 아래와 같다.

* Modifying a variable
* Modifying a data structure in place
* Setting a field on an object
* Throwing an exception or halting with an error
* Printing to the console or reading user input
* Reading from or writing to a file
* Drawing on the screen

이것이 없는 프로그램을 상상할 수 있는가? 어려울 것이다.

함수형 프로그래밍은 우리가 표현할 수 있는 프로그램이 무엇인가가 아니라 프로그램을 어떻게 작성할까에 달려있다.

순수 함수로 프로그래밍하여 얻을 수 있는 modularity의 향상에 대해 살펴볼 것이다. 순수 함수를 통해 더 쉽게 테스트하고, 재사용하고, 병렬화, 일반화 그리고 추론 까지 할 수 있다.

간단한 프로그램을 통해 살펴보자. 그리고 2가지 중요한 컨셉인 referential transparency와 substitution model에 대해서도 알아보자.

== 1.1 함수형 프로그래밍의 장점

=== 1.1.1 부수효과가 있는 프로그램

[source,scala]
----
clsss Cafe {
	def buyCoffee(cc: CreditCard): Coffee = {
		val cup = new Coffee()
		cc.charge(cup.price)
		cup
	}
}
----

위 프로그램에서 cc.charge 가 사이드 이펙트이다. 신용카드는 외부와 인터렉션을 하게 된다. 사이드 이펙트의 결과로 코드는 테스트 하기 어려워 진다.

CreditCard는 어떻게 카드 회사와 연결되는지 내부 시스템에 이를 어떻게 기록할지에 대해서는 몰라야 한다.

그래서 아래와 같이 수정할 수 있다.

[source,scala]
----
class Cafe {
	def buyCoffee(cc: CreditCard, p: Payments): Coffee = {
		val cup = new Coffee()
		p.charge(cc, cup.price)
		cup
	}
}
----

그래도 여전히 p.charge(cc, cup.prive)를 호출할 때 사이드 이펙트가 남아있다. Payments는 인터페이스가 될 수 있고, Mock으로 만들어 테스트가 용이할 수 있다.

테스트를 별개로 치더라도, buyCoffee는 재사용할 수 없다는 문제가 있다.

==== 1.1.2 함수적 해결: 부수효과 제거하기

함수형적인 해결책은 사이드 이펙트를 제거하고  buyCoffee가 값으로  charge 를 반환하는 것이다.

[source,scala]
----
class Cafe {
	def buyCoffee(cc: CreditCard): (Coffee, Charge) = {
		val cup = new Coffee()
		(cup, Charge(cc, cup,price))
	}
----

NOTE: 트램펄린(trampoline): 여러 함수가 한번에 하나씩 다른 함수를 호출하면서 이루어지는 루프
(http://www.scala-lang.org/api/current/scala/util/control/TailCalls$.html)

=== 2.4.2 첫 번째 고차 함수 작성

==== 고차 함수
함수를 인자로 받는 함수
=======
이렇게 하면 재사용하기 쉽고 한 트랜젝션에 여러개의 커피를 주문하기도 쉽다. 그럼  Charge는 무엇일까?  CreditCard와 amount를 가가지고  combine이라는 함수를 가진 것이다.

[source,scala]
----
case class Charge(cc: CreditCard, amount: Double) {
	def combine(other: Charge): Charge =
		if(cc == other.cc)
			Charge(cc, amount + other.amount)
		else
			throw new Exception("Can't combine charges to different cards")
	}
}
----

[source,scala]
----
class Cafe{
	def buyCoffee(cc: CreditCard): (Coffee, Charge) = ...

	def buyCoffees(cc: CreditCard, n: Int): (List[Coffee], Charge) = {
		val purchases: List[(Coffee, Charge)] = List.fill(n)(buyCoffeee(cc))
		val (coffee, charges) = purchases.unzip{coffees, charges.reduce((c1,c2) => c1.combine(c2))}
----

전체적으로 프로그램이 나아졌다  buyCoffee를 직접 buyCoffeess 함수에 재사용할 수 있었다.

Charge를 일급함수로 만들면 여러개의 결제건은 하나로 뭉개는데 유용하기도 하다.

[source,scala]
----
def coalesce(charges: List[Charge]): List[Charge] =
	charges.groupBy(_.cc).values.map(_.reduce(_ combine _)).toList
----

FP는 많은 사람들이 논리적 endpoint의 좋은 아이디어라고 생각하는 부분을 적용하는 것으로, 적용 가능성이 덜 명확한 상황에서도 해당 분야를 적용할 수 있다.

== 1.2 명확하게 순수 함수란 무엇인가?

FP에 의미는 순수 함수로 프로그래밍 하는 것이고, 순수 함수는 사이드 이펙트가 없다는 것에 대해서 알아봤다.
이제 더 형식화 시켜서 프로그램이 함수형이다 라는 의미를 알아볼 것이다. 이는 우리에게 함수형 프로그래밍의 장접에 대해 추가적인 통찰력을 줄 것이다. 순수 함수는 추론하기가 더 쉽다는 점이다.

입력 A에서 출력 B를 얻는 함수 f를 아래와 같이 표현할 수 있다.

[source,scala]
----
A => B
----

내부의 어떤 변화 또는 외부 처리과정은 f(a)의 결과를 계산하는 것과 무관하다.

다른 말로 함수는 주어진 입력에 대해서 결과를 계산하는 것보다는 프로그램을 실행하는 것에 대해 들어나는 효과(observable effect)가 없다. 우리는 이를 사이드 이펙트가 없다고 말한다.

우리는 이미 순수 함수에 친숙하다 + 나 length 함수가 그렇다. 우리는 순수함수의 이 아이디어를 referential transparency(RT)의 개념을 사용해서 형식화 할 수 있다. 일반적으로 이는 표현식의 특성이며 함수에 국한된 것은 아니다. 그래서 2 + 3 은 5인데 이를 간단하게 변환할 수 있다.

이게 참조 투명성(referentially transparent)하다는 표현의 의미의 전부이다. 표현식이 프로그램의 의미상 변경없이 결과로 변경될 수 있는 것이다.

== 1.3 참조 투명성, 순수성, 그리고 대체자 모델

우리 예제에서  RT가 어떻게 정의되었는지 살펴보자.

[source,scala]
----
def buyCoffee(cc: CreditCard): Coffee = {
	val cup = new Coffee()
	cc.charge(cup.price)
	cup
}
----

cc.charge(cup.price)의 결과는 buyCoffee에 의해서 무시 된다.
결과는 cup이고 new Coffee()와 같다. buyCoffee가 pure 하기 위해서 RT의 정의에 의해 p(buyCoffee(aliceCreditCard))가 p(new Coffee())가 되어야 한다.

참조 투명성은 함수의 결과 타입에 따라 모든 함수의 수행은 반환하는 값에 의해 표현된다는 것이 변함 없는 것을 강제하는 것이다. 이런 제약사항은 substitution model이라고 부르는 프로그램 평가에 대한 추론을 간단하고 자연스럽게 한다.
표현이 참조 투명할 때, 산술적 동일함을 해결하는 것 처럼 계산 과정을 상상할 수 있다.

달리 말해서 RT는 프로그램에 대해서 동일한 추론을 가능하게 한다.

[source, scala]
----
scala> val x = "Hello world"
x: java.lang.String = Hello world

scala> val r1 = x.reverse
r1: String = dlrow olleH

scala> val r2 = x.reverse
r2: String = dlrow olleH    <- r1 과 r2는 같다
----

[source, scala]
----
scala> val r1 = "Hello world".reverse
r1: String = dlrow olleH

scala> val r2 = "Hello world".reverse
r2: String = dlrow olleH    <- r1 과 r2는 여전히 같다.
----

[source,scala]
----
scala> val x = new StringBuilder("Hello")
x: java.lang.StringBuilder = Hello

scala> val y = x.append(" world")
y: java.lang.StringBuilder = Hello world

scala> val r1 = y.toString
r1: java.lang.String = Hello world

scala> val r2 = y.toString
r2: java.lang.String = Hello world <- r1과 r2는 같다
----

[source,scala]
----
scala> val x = new StringBuilder("Hello")
x: java.lang.StringBuilder = Hello

scala> val r1 = x.append(" world").toString
r1: java.lang.String = Hello world

scala> val r2 = x.append(" world").toString
r2: java.lang.String = Hello world 재깅 <- r1과 r2는 더이상 같지 않다.
----
