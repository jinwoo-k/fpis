= Chapter11. 모나드

앞서 모노이드를 통해 동일한 법칙을 만족한다는 공통점을 가진 연산들로 유용한 인터페이스를 정의할 수 있다는 새로운 사고방식을 배울 수 있었다. 이번 장에서는 그러한 사고 방식을 계속 이어나가서 앞서 설계한 라이브러리에 존재하는 중복된 코드를 추출하는 문제에 적용해본다.

=>  새로운 추상 인터페이스 Functor와 Monad를 발견!

== 11.1 함수자: map함수의 일반화

다양한 조합기 라이브러리를 구현할 때마다 적은 수의 기본수단들을 작성하고, 오직 그 기본수단들만 이용해서 여러 조합기를 작성하는 식으로 진행했다. 그리고 서로 다른 라이브러리의 조합기들 사이에서 유사성을 발견할 수 있었다.

[source,scala]
----
def map[A,B](ga: Gen[A])(f: A => B): Gen[B]
def map[A,B](pa: Parser[A])(f: A => B): Parser[B]
def map[A,B](oa: Option[A])(f: A => B): Option[B]
----

* 변경되는 것은 "타입"뿐
* "map을 구현하는 자료 형식"으로 trait로 표현 가능

[source,scala]
----
trait Functor[F[_]]{
  def map[A,B](fa: F[A])(f: A => B): F[B]
}
----

위의 trait를 사용해서 List를 위한 Functor 인스턴스를 만들 수 있다.

[source,scala]
----
val listFunctor = new Functor[List]{
  def map[A,B](as: List[A])(f: A => B): List[B] = as map f
}
----

List(또는 Option, F)같은 형식 생성자를 가리켜 함수자(functor)라고 부른다. Functor[F] 인스턴스는 F가 실제로 하나의 함수자임을 증명하는 증거가 된다.

이러한 추상으로 할 수 있는 일이 무엇일까? 이 책에서 여러 번 보았듯이, 단지 인터페이스의 연산들을 순수하게 대수적인 방식으로 가지고 노는 것 만으로도 유용한 함수를 발견할 수 있다.

===== 1) unzip

[source,scala]
----
trait Functor[F[_]]{
  ...
  def distribute[A,B](fab: F[(A, B)]): (F[A], F[B]) =
    (map(fab)(_._1), map(fab)(_._2))
}
----

이 함수는 단지 형식들을 따라 작성한 것일 뿐이다. List[(A, B)]에 distribute를 적용하면 길이가 같은 목록 두개가 산출된다. 하나는 A로만 이루어진 목록이고 또 하나는 B로만 이루어진 목록이다. 이 연산을 unzip이라 부르기도 한다.

===== 2.codistribute

[source,scala]
----
def codistribute[A,B](e: Either[F[A], F[B]): F[Either[A, B]] =
  e match {
    case Left(fa) => map(fa)(Left(_))
    case Right(fb) => map(fb)(Right(_))
  }
----

A에 대한 생성기나 B에 대한 생성기가 있다면, 둘 중 어떤 것이 주어지느냐에 따라 A나 B중 하나를 생성하는 생성기를 만들 수 있다.

=== 11.1.1 함수자의 법칙들

Functor 같은 추상을 만들 때에는 어떤 추상 메서드들이 필요한지 고민할 뿐만 아니라 구현들이 지켜야 할 법칙(law)들도 고민해야 한다. 법칙을 지키는 것이 중요.

* 법칙은 인터페이스의 의미론(sementic)을, 해당 대수를 인스턴스들과는 독립적으로 추론할 수 있을 정도의 새로운 수준으로 끌어올리는 데 도움이 된다.
  * Monoid[A] * Monoid[B] = Monoid[(A,B)]
* Functor같은 추상 인터페이스의 함수들로부터 조합기들을 파생할 때 법칙들에 의존하는 경우가 많다.

> 법칙은 프로그래머가 결정하는 것일 뿐, 스칼라가 강제하지 않음.

===== '구조적 보존'

[source,scala]
----
map(x)(a => a) == x
----

자료구조 x에 항등 함수를 사상하는 것 자체가 하나의 항등 함수이어야 한다.

=> 이렇게 하려면 예외를 던지거나, List의 첫 요소를 제거, Some을 None으로 바꾸는 등의 행동을 해서는 안됨.

[source,scala]
----
def distribute[A,B](fab: F[(A, B)]): (F[A], F[B])
def codistribute[A,B](e: Either[F[A], F[B]): F[Either[A, B]]
----

=> 이런 종류의 대수적 추론은 속성마다 개별적인 검사를 작성할 필요가 없어서 프로그래머의 시간을 크게 절약해 줄 수 있다!

== 11.2 모나드: flatMap함수와 unit함수의 일반화

* Functor는 그리 매력적이지 않다
  * 순전히 map만으로 정의할 수 있는 유용한 연산이 별로 많지 않음

= Monad!

===== Gen과 Parser, Option에 대한 map2의 구현

[source,scala]
----
def map2[A,B,C](fa: Gen[A], fb: Gen[B])(f: (A,B) => C): Gen[C] =
  fa flatMap(a => fb map (b => f(a,b)))

def map2[A,B,C](fa: Parser[A], fb: Parser[B])(f: (A,B) => C): Parser[C] =
  fa flatMap(a => fb map (b => f(a,b)))

def map2[A,B,C](fa: Option[A], fb: Option[B])(f: (A,B) => C): Option[C] =
  fa flatMap(a => fb map (b => f(a,b)))
----

구현이 모두 동일 하다! 이 함수들은 공통점이 없어 보이는 서로 다른 자료 형식에 적용하지만...

=== 11.2.1 Monad 특질

Parser와 Gen, Par, Option등등 지금까지 살펴본 여러 자료 형식들을 하나로 묶는 공통점은 이들이 Monad라는 사실이다.

이 책의 제 2부에서는 개별 자료 형식들을 살펴보면서 유용한 조합기들을 많이 파생할 수 있는 최소한의 기본수단 연산들의 집합을 찾았다. 그와 비슷하게, 이번에는 추상 인터페이스를 최소한의 기본수단들의 집합으로 정련해 볼 것이다.

[source,scala]
----
trait Mon[F[_]]{
  def map2[A,B,C](fa: F[A], fb: F[B])(f: (A,B) => C): F[C] =
    fa flatMap(a => fb map (b => f(a,b)))
}
----

이 구현은 아직 컴파일되지 않는다. F에 대해 아무것도 알지 못하므로, F[A]에 대해 flatMap이나 map을 적용하는 방법을 모를 수 밖에 없다.

그런데 지금이라도 map과 flatMap을 추가하고 추상적인 상태로 남겨둘 수 있다.

[source,scala]
----
trait Mon[F[_]]{
  def map[A,B](fa: F[A])(f: A => B): F[B]
  def flatMap[A,B](fa: F[A])(f: A => F[B]): F[B]

  def map2[A,B,C](fa: F[A], fb: F[B])(f: (A,B) => C): F[C] =
    fa flatMap(a => fb map (b => f(a,b)))
}
----

현재 정의된 기본수단은 map과 flatMap이고, 이 둘로부터 map2를 파생할 수 있다. 그런데 flatMap과 map이 최소한의 기본수단일까? map2를 구현하는 자료 형식에는 항상 unit 함수가 있으며, 이전에 보앗듯이 map은 flatMap과 unit을 이용해서 구현할 수 있다.

[source,scala]
----
def map[A,B](f: A => B): Gen[B] =
  flatMap(a => unit(f(a)))
----

따라서 최소한의 기본수단 집합은 unit과 flatMap이어야 한다.

[source,scala]
----
trait Monad[F[_]] extends Functor[F] { <1>
  def unit[A](a: => A): F[A]
  def flatMap[A,B](ma: F[A])(f: A => F[B]): F[B]

  def map[A,B](ma: F[A])(f: A => B): F[B] =
    flatMap(ma)(a => unit(f(a)))

  def map2[A,B,C](ma: F[A], mb: F[B])(f: (A,B) => C): F[C] =
    flatMap(ma)(a => map(mb)(b => f(a,b)))
}
----
<1> Monad는 map의 기본 구현을 제공하므로 Functor를 확장할 수 있다. 모든 모나드는 함수자이나, 모든 함수자가 모나드인 것은 아니다.

이를 다시 구체적인 자료 형식과 연관시키는 한 예로, Gen을 위한 Monad인스턴스를 구현해보자.

[source,scala]
----
object Monad {
  val genMonad = new Monad[Gen] {
    def unit[A](a: => A): Gen[A] = Gen.unit(a)
    def flatMap[A,B](ma: Gen[A])(f: A => Gen[B]): Gen[B] =
      ma flatMap f
  }
}
----

unit과 flatMap만 구현하면 map과 map2는 저절로 생긴다. :)


=== 11.3 모나드적 조합기

[source,scala]
----
def sequence[A](lma: List[F[A]]): F[List[A]] =
  lma.foldRight(unit(List[A]()))((ma, mla) => map2(ma, mla)(_ :: _))

def traverse[A,B](la: List[A])(f: A => F[B]): F[List[B]] =
  la.foldRight(unit(List[B]()))((a, mlb) => map2(f(a), mlb)(_ :: _))
----


파서 또는 생성기를 n번 되풀이해서 그 길이의 입력을 인식하는 파서 또는 그 개수만큼의 목록들을 생성하는 생성기를 얻는 데 사용되는 조합기를 Monad 특질에 추가.

[source,scala]
----
// Recursive version:
def _replicateM[A](n: Int, ma: F[A]): F[List[A]] =
  if (n <= 0) unit(List[A]()) else map2(ma, _replicateM(n - 1, ma))(_ :: _)

// Using `sequence` and the `List.fill` function of the standard library:
def replicateM[A](n: Int, ma: F[A]): F[List[A]] =
  sequence(List.fill(n)(ma))
----


주어진 생성기 두 개로 쌍들을 생성하는 하나의 생성기를 돌려주는 조합기 product를 모나드 F에 대해 일반적으로 구현.
`def product[A,B](ma: F[A], mb: F[B]): F[(A, B)] = map2(ma, mb)((_, _))`


[source,scala]
----
def filterM[A](ms: List[A])(f: A => F[Boolean]): F[List[A]] =
   ms.foldRight(unit(List[A]()))((x,y) =>
     compose(f, (b: Boolean) => if (b) map2(unit(x),y)(_ :: _) else y)(x))
----

=== 11.4 모나드 법칙

Monad[F]도 일종의 Functor[F]이므로 함수자 법칙들이 Monad에 대해서도 성립.


==== 11.4.1 결합법칙

Gen 모나드를 이용한 모의 주문 생성기


[source,scala]
----
// 목록 11.6 order 클래스의 정의
case class Order(item: Item, quantity: Int)
case class Item(name: String, price: Double)

val genOrder: Gen[Order] = for {
  name <- Gen.stringN(3)
  price <- Gen.uniform.map(_ * 10)
  quantity <- Gen.choose(1, 100)
} yield Order(Item(name, price), quantity)
----

Item을 개별적으로 생성하는 Item 생성기

[source,scala]
----
val genItem: Gen[Item] = for {
  name <- Gen.stringN(3)
  price <- Gen.uniform.map(_ * 10)
} yield Item(name, price)
----


위 아이템 생성기를 이용하도록 변경된 genOrder

[source,scala]
----

val genOrder: Gen[Order] = for {
  item <- genItem
  quantity <- Gen.choose(1,100)
} yield Order(item, quantity)
----


위 두 구현은 동일하지 않지만 그 결과는 동일함 확인 필요.
map호출과 flatMap 호출로 전개하여 확인.

[source,scala]
----
// 전자의 경우
Gen.nextString.flatMap(name =>
Gen.nextDouble.flatMap(price =>
Gen.nextInt.map(quantity =>
  Order(Item(name, price), quantity))))
----


[source,scala]
----
// 후자의 경우
Gen.nextString.flatMap(name =>
Gen.nextInt.map(price =>
  Item(name, price))).flatMap(item =>
  Gen.nextInt.map(quantity =>
    Order(item, quantity)))
----

위 두 구현의 전개는 flatMap이 결합법칙을 만족한다는 가정하에 정확히 동일한 일을 하리라고 가정함이 합당하다.

`x.flatMap(f).flatMap(g) == x.flatMap(a => f(a).flatMap(g))`

이 법칙은 Gen 뿐만 아니라 Parser나 Option을 비롯한 모든 모나드에 성립.

==== 11.4.2 특정 모나드의 결합법칙 성립 증명

Option에 대해 성립함 증명.

- x가 None이라고 가정할 때.

`None.flatMap(f).flatMap(g) == None.flatMap(a => f(a).flatMap(g))`

위 등식을 줄이면 `None == None`

즉, x가 None일 때 결합법칙이 성립한다.


- x가 Some(v)이라고 가정할 때.

[source,scala]
----
Some(v).flatMap(f).flatMap(g) == Some(v).flatMap(a => f(a).flatMap(g))
f(v).flatMap(g) == (a => f(a).flatMap(g))(v)
f(v).flatMap(g) == f(v).flatMap(g)
----

이 법칙은 x가 임의의 v에 대한 Some(v)일 때에도 성립한다. 이로써 이 법칙이 x가 None일 때와 x가 Some일 때 성립함이 증명되었다.
그리고 Option에 대해서는 그 두 가지 가능성밖에 없으므로, 이 법칙은 Option에 항상 성립한다.


- 크라이슬리 화살표(Kleisli arrow)
결합법칙을 만족하는 `A => F[B]` 같은 형식의 모나드적 함수
크라이슬리 화살표들은 합성이 가능.

`def compose[A,B,C](f: A => F[B], g: B => F[C]): A => F[C]`

[source,scala]
----
def compose[A,B,C](f: A => F[B], g: B => F[C]): A => F[C] =
  a => flatMap(f(a))(g)
----

compose 함수를 이용하면 모나드에 관한 결합법칙을 훨씬 대칭적인 형태로 표현할 수 있다.

`compose(compose(f, g), h) == compose(f, compose(g, h))`

[source,scala]
----
def _flatMap[A,B](ma: F[A])(f: A => F[B]): F[B] =
  compose((_:Unit) => ma, f)(())
----

=== 11.4.3 항등법칙

모나드에서 compose에 대한 항등원이 존재.
unit이 바로 그 항등원.

`def unit[A](a: => A): F[A]`

왼쪽 항등법칙 : `compose(f, unit) == f`
오른쪽 항등법칙 : `compose(unit, f) == f`

이 법칙들을 flatMap으로 표현.
`flatMap(x)(unit) == x`
`flatMap(unit(y))(f) == f(y)`

[source,scala]
----
def join[A](mma: F[F[A]]): F[A] = flatMap(mma)(ma => ma)

def flatMap[A,B](ma: F[A])(f: A => F[B]): F[B] =
    join(map(ma)(f))
----

=== 11.5 도대체 모나드란 무엇인가?

- Monad는 Monoid처럼 좀 더 추상적이고 순수 대수적인 인터페이스
- Monad 조합기들은 주어진, 그리고 모나드가 될 수 있는 자료 형식에 대한 전체 API 중 일부만 차지
- Monad는 한두 형식을 일반화하는 것이 아니라, Moand 인터페이스와 법칙을 만족할 수 있는 아주 다양하고 많은 자료 형식을 일반화한다.

===== 모나드의 조건
	- 기본 Monad 조합기들의 최소 집합 세 가지 중 하나의 구현들을 제공한다.
		- unit과 flatMap
		- unit과 compose
		- unit, map, join
	- 결합법칙과 항등법칙을 만족한다.

==== 11.5.1 항등 모나드

===== 항등 모나드의 형식

[source,scala]
----
case class Id[A](value: A)
----

- Id는 그냥 간단한 wrapper다. 특별히 하는 일은 없다.
- Id를 A에 적용하는 것은 항등 연산이다. 감싸인 형식과 감싸이지 않은 형식이 완전히 동형(isomorphic)이기 때문이다(즉, 한 형식에서 다른 형식으로 갔다가 다시 원래의 형식으로 돌아와도 정보가 전혀 소실되지 않는다).

===== 항등 모나드를 REPL에서 시험

[source,scala]
----
scala> Id("Hello, ") flatMap (a =>
     |   Id("monad!") flatMap (b =>
     |     Id(a + b)))
res0: Id[java.lang.String] = Id(Hello, monad!)
----

===== 동일한 작업을 for-함축으로 표현

[source,scala]
----
scala> for {
     |   a <- Id("Hello, ")
     |   b <- Id("monad!")
     | } yield a + b
res1: Id[java.lang.String] = Id(Hello, monad!)
----

- 항등 모나드에 대한 flatMap의 동작(action)은 그냥 변수 치환이다.
- 변수 a와 b가 각각 "Hello, "와 "monad!"에 묶인 후 표현식 a + b로 대입된다.

===== 같은 동작을 Id wrapper 없이 스칼라 자체의 변수를 이용해서 작성

[source,scala]
----
scala> val a = "Hello, "
a: java.lang.String = "Hello, "
scala> val b = "monad!"
b: java.lang.String = monad!
scala> a + b
res2: java.lang.String = Hello, monad!
----

- Id wrapper 말고는 차이가 없다.
- **즉, 모나드는 변수의 도입과 binding, 그리고 변수 치환 수행을 위한 문맥을 제공한다.**

==== 11.5.2 State 모나드와 부분 형식 적용

===== 제6장에서 논의한 State 자료 형식 복습

[source,scala]
----
case class State[S, A](run: S => (A, S)) {
  def map[B](f: A => B): State[S, B] =
    State(s => {
      val (a, s1) = run(s)
      (f(a), s1)
    })
  def flatMap[B](f: A => State[S, B]): State[S, B] =
    State(s => {
	  val (a, s1) = run(s)
      f(a).run(s1)
    })
}
----

- 형태로 볼 떄 State는 모나드가 되기에 충분해 보인다.
- 그러나 State의 형식 생성자는 형식 인수 두 개를 받지만 Monad는 인수가 하나인 형식 생성자를 요구하므로, 그냥 Monad[State]라고 표기할 수 없다.
- 하지만 어떤 구체적인 S에 대한 State[S, _]는 Monad가 받아들일 수 있는 형태이다. 이는 State에 단 하나의 모나드 인스턴스가 아닌 여러 인스턴스들(S마다 하나씩)의 family가 있음을 뜻한다.
- 형식 인수 S가 어떤 구체적인 형식으로 고정되도록 State를 부분적으로 적용할 수 있다면 좋을 것이다.
- 예를 들어 **IntState 형식 생성자**를 만들 수 있다. InstState 형식 생성자는 첫 형식 인수가 Int로 고정된 State의 별칭이다.

===== IntState 형식 생성자

[source,scala]
----
type IntState[A] = State[Int, A]
----

- IntState는 Monad로 만들기에 딱 맞는 형태다.

===== IntState를 Monad로 만들어 보았습니다.

[source,scala]
----
object IntStateMonad extends Monad[IntState] {
  def unit[A](a: => A): IntState[A] = State(s => (a, s))
  def flatMap[A,B](st: IntState[A])(f: A => IntState[B]): IntState[B] =
    st flatMap f
}
----

- 구체적인 상태 형식마다 이렇게 개별적인 Monad 인스턴스를 작성해야 한다면 코드가 엄청나게 중복될 것이다.
- State[Int, _]라고 표기한다고 해서 저절로 익명 형식 생성자가 만들어지지 않는다.
- 대신, 형식 수준에서 람다 구문과 비슷한 것을 사용할 수 있다.

===== IntState를 inline에서 선언

[source,scala]
----
object IntStateMonad extends
  Monad[({type IntState[A] = State[Int, A]})#IntState] {
  ...
}
----

- 괄호 안에서 익명 형식을 선언하는 것이다.
- 익명 형식의 멤버: 형식 별칭 IntState.
- 괄호 밖에서는 # 구문을 이용해서 IntState 멤버에 접근한다(객체 멤버를 value로 접근 할 때 '객체명.멤버명'같이 마침표를 사용하는 것처럼, 형식 수준에서 형식 멤버에 접근할 때에는 # 기호를 사용한다).
- 이렇게 즉석에서 선언된 형식 생성자를 스칼라에서는 **형식 람다(type lambda)**라고 부른다.

===== State 형식 생성자를 부분 적용하고 StateMonad 특질을 선언

[source,scala]
----
def stateMonad[S] = new Monad[({type f[x] = State[S,x]})#f] {
  def unit[A](a: => A): State[S,A] = State(s => (a, s))
  def flatMap[A,B](st: State[S,A])(f: A => State[S,B]): State[S,B] =
￼￼￼    st flatMap f
}
----

- StateMonad[S]의 인스턴스는 주어진 상태 형식 S에 대한 모나드 인스턴스다.

==== Id 모나드와 State 모나드의 차이점

===== State에 대한 기본수단 연산

[source,scala]
----
def getState[S]: State[S, S]
def setState[S](s: => S): State[S, Unit]
----

===== for-함축을 이용한 상태 조회 및 설정

[source,scala]
----
val F = stateMonad[Int]

def zipWithIndex[A](as: List[A]): List[(Int,A)] =
  as.foldLeft(F.unit(List[(Int, A)]()))((acc,a) => for {
    xs <- acc
    n  <- getState
    _  <- setState(n + 1)
} yield (n, a) :: xs).run(0)._1.reverse
----

- for 블록 안에서 getState와 setState가 쓰이는 방식에 주목하자.
- Id 모나드와 State 모나드의 공통점: 변수를 binding한다는 점.
- Id 모나드와 State 모나드의 차이점: 행간에서 또 다른 일이 진행된다.
	- for-함축의 각 행에서, flatMap 구현은 현재 상태가 getState에 주어지며 새 상태가 setState 다음의 모든 동작으로 전파됨을 보장한다.

==== 결론

- flatMap 호출들의 연쇄는(또는 그에 해당하는 for-함축은) 변수에 값을 배정하는 명령문들로 이루어진 명령식 프로그램과 비슷하며, **모나드는 각 명령문의 경계에서 어떤 일이 일어나는지를 명시한다.**
	-  Id: Id 생성자 안에서의 wrapping 풀기와 다시 wrapping하기 이외에는 아무 일도 일어나지 않는다.
	- State: 가장 최근의 상태가 한 명령문에서 다음 명령문으로 전달된다.
	- Option 모나드: 명령문이 None을 돌려주어서 프로그램이 종료될 수 있다.
	- List 모나드: 명령문이 여러 결과를 돌려줄 수 있으며, 그러면 그다음의 명령문들이 여러 번(결과당 한 번씩) 실행될 수 있다.
- **Monad 계약이 행간에서 무엇이 일어나는지 명시하는 것은 아니다. 단지, 어떤 일이 일어나든 그것이 결합법칙과 항등법칙을 만족함을 명시할 뿐이다.**
